{{- /* Step 1: Perform lookup, store result */}}
{{- $lookupResult := lookup "v1" "Node" "" "" | default dict -}}
{{- $internalIP := "" -}}
{{- /* Step 2: Get values, store result */}}
{{- $nodeList := $lookupResult.items -}}
{{- if $nodeList }}
  {{- /* Step 3: Get first node data, store result */}}
  {{- $nodeData := first $nodeList -}}
  {{- /* Step 4: Get the status */}}
  {{- $statusValue := $nodeData.status -}}
  {{- /* Step 5: Get the addresses */}}
  {{- $addressesList := $statusValue.addresses -}}
  {{- /* Step 6: Get the InternalIP address */}}
  {{- range $address := $addressesList -}}
    {{- if and (not $internalIP) (eq $address.type "InternalIP") -}}
      {{- $internalIP = $address.address -}}
    {{- end -}}
  {{- end -}}
{{- end -}}
{{- $cert := "" -}}
{{- if or (eq .Values.fleetspeak.frontend.expose "internal") (eq .Values.fleetspeak.frontend.expose "external") -}}
  {{- $cert = genSelfSignedCert .Values.fleetspeak.subjectCommonName (list .Values.fleetspeak.frontend.address) (list "fleetspeak-frontend")  3650 }}
{{- else }}
  {{- if not $internalIP -}}
    {{- /* Note: This should not ever happen but we set it to keep the linter happy. */}}
    {{- $cert = genSelfSignedCert .Values.fleetspeak.subjectCommonName (list "10.0.0.2") (list "fleetspeak-frontend")  3650 }}
  {{- else -}}
  {{- $cert = genSelfSignedCert .Values.fleetspeak.subjectCommonName (list $internalIP) (list "fleetspeak-frontend")  3650 }}
  {{- end -}}
{{- end -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-grr-fleetspeak-frontend-components
  {{- if .Values.grr.namespace }}
  namespace: {{ .Values.grr.namespace }}
  {{- end }}
stringData:
  frontend.components.textproto: |
    mysql_data_source_name: "{{ .Values.fleetspeak.mysqlDb.userName }}:{{ .Values.fleetspeak.mysqlDb.userPassword }}@tcp({{ .Values.fleetspeak.mysqlDb.address }}:{{ .Values.fleetspeak.mysqlDb.port }})/{{ .Values.fleetspeak.mysqlDb.name }}"
    https_config: <
      listen_address: "0.0.0.0:{{ .Values.fleetspeak.frontend.listenPort }}"
      {{- if .Values.fleetspeak.generateCert }}
      certificates: {{ $cert.Cert | quote }}
      key: {{ $cert.Key | quote }}
      {{- else }}
      certificates: {{ default (.Files.Get "../../certs/fleetspeak-frontend.crt") .Values.fleetspeak.frontend.cert | quote }}
      key: {{ default (.Files.Get "../../certs/fleetspeak-frontend.key") .Values.fleetspeak.frontend.key | quote }}
      {{- end }}
      {{- if .Values.fleetspeak.httpsHeaderChecksum }}
      frontend_config: <
        https_header_checksum_config: <
          client_certificate_header: "client-certificate" 
          client_certificate_checksum_header: "X-Client-Cert-Hash"
        >
      >
      {{- end }}
    >
    health_check_config: <
      listen_address: "0.0.0.0:{{ .Values.fleetspeak.frontend.healthCheckPort }}"
    >
    notification_listen_address: "0.0.0.0:{{ .Values.fleetspeak.frontend.notificationPort }}"
    notification_public_address: "FLEETSPEAK_FRONTEND_IP:{{ .Values.fleetspeak.frontend.notificationPort }}"
    stats_config: <
      address: "0.0.0.0:{{ .Values.prometheus.metricsPort }}"
    >
